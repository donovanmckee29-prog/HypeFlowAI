version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hypeflow-postgres
    environment:
      POSTGRES_DB: hypeflow_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - hypeflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d hypeflow_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hypeflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hypeflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for AI data
  mongodb:
    image: mongo:6.0
    container_name: hypeflow-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: hypeflow_ai
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - hypeflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hypeflow-backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hypeflow_ai
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/hypeflow_ai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EBAY_API_KEY=${EBAY_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./ai:/app/ai
      - ./scraper:/app/scraper
      - ./models:/app/models
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - hypeflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: hypeflow-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    depends_on:
      - backend
    networks:
      - hypeflow-network
    restart: unless-stopped

  # AI Model Training Service
  ai-trainer:
    build:
      context: .
      dockerfile: Dockerfile.ai
    container_name: hypeflow-ai-trainer
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hypeflow_ai
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/hypeflow_ai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./ai:/app/ai
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - hypeflow-network
    restart: unless-stopped
    command: ["python", "ai/train_models.py"]

  # eBay Scraper Service
  scraper:
    build:
      context: .
      dockerfile: Dockerfile.scraper
    container_name: hypeflow-scraper
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hypeflow_ai
      - REDIS_URL=redis://redis:6379
      - EBAY_API_KEY=${EBAY_API_KEY}
      - PROXY_LIST=${PROXY_LIST}
    volumes:
      - ./scraper:/app/scraper
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hypeflow-network
    restart: unless-stopped
    command: ["python", "scraper/main.py"]

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hypeflow-celery-worker
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hypeflow_ai
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    volumes:
      - ./backend:/app
      - ./ai:/app/ai
      - ./scraper:/app/scraper
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hypeflow-network
    restart: unless-stopped
    command: ["celery", "-A", "backend.main", "worker", "--loglevel=info"]

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hypeflow-celery-beat
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hypeflow_ai
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hypeflow-network
    restart: unless-stopped
    command: ["celery", "-A", "backend.main", "beat", "--loglevel=info"]

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hypeflow-flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - hypeflow-network
    restart: unless-stopped
    command: ["celery", "-A", "backend.main", "flower", "--port=5555"]

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hypeflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - hypeflow-network
    restart: unless-stopped

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hypeflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - hypeflow-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hypeflow-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - hypeflow-network
    restart: unless-stopped

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: hypeflow-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hypeflow-network
    restart: unless-stopped

  # Kibana for Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: hypeflow-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - hypeflow-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  hypeflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
